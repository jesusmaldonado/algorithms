Algorithms solution


2.1
1. Insertion sort diagram

A = [31,41,59,26,41,58]
no sorts until the third element
A = [26,31,41,59,41,58]
A = [26,31,41,41,59,58]
A = [26,31,41,41,58,59]

This is a mixed-case scenario where insertion sort is actually not ~that~ bad. Between O(n) and O(n^2)

2. Just flip the comparator.

def inc_insertion_sort(array)
  #go through the array
  array.each_with_index do |el, i| #n steps
    #the elements starting from [0..i - 1] will always be sorted (initialization loop invariant)
    # run 1: el: 5, i: 1
    j = i - 1 #1 step
    while j >= 0 && array[j] < el #at worst, we will do n-1 comparisons
      # run 1: true
      array[j+1] = array[j]
      # run1: [5,5,4,6,1,3]
      j -= 1
      # run1: 0
    end
    array[j+1] = el #1 step
    # run1: [2,5,4,6,1,3]
    #the array is still sorted (propagation)
  end
  array #1 step (then here at termination, the algorithm is correct)
end

3. Write linear search, and use the loop invariant induction to prove your algorithm is correct.
  def linear_search(array, v)
    array.each do |item|
      #loop invariant: initialization (item v does exist)
      #propagation (if item != v) propagates the loop, yielding more items (propagation)
      return v if item == v
      #termination, two conditions (if item == v), we return from the method, avoiding the nil
    end
    #if the item does not exist in the array, then we return nil
    nil
  end
  #O(n) runtime, possibly O(1) memory, at most O(2) not sure if storing V counts as an object?

4. Input: two (n-bit arrays are inserted, with length of n elements) are to be added.

    Output: a new n+1 array with the output of the addition:

2.2
Algorithm analysis usually happens in terms of the input size, which for numbers is n or for graphs (vertex, edge) notation is usually sufficient.

2.2 Exercises
1.
Express n^3/1000 - 100n^2 - 100n + 3 in O(n) - > O(n^3)


2.
Selection Sort.
def selection_sort(array)
#assume array has a size and has numbers in it and is an array

  (0..array.length - 1).each do |i|
    small = array[i]
    smallidx = i
    #for propagation, we know that the n-1 smallest element will be found
    #because the element is not within the scope of the next outer loop
    (i..array.length - 1).each do |j|
      small, smallidx = array[j], j if array[j] < small
    end
    # we find the n-th smallest element of the array initialization
    # replace the n-th smallest elements index with the not nth-smallest element
    array[smallidx] = array[i]
    array[i] = small
  end
  #the loop terminates when all portions of the loop have been reached
  array
end


3.
Linear search on average could take n/2 searches to find the element and n at most...

4.
You can modify any algorithm to have a good-case running time by making sure the input is small as possible, by making sure the input is kinda-sorta-right.


2.3 Divide and conquer
1. smaller subproblems
2. subdivide subproblems or solve if small
3. combine the subproblems into the solution for the original problem

1. Write [3,4,52,26,38,57,9,49] a series of merge-sort operations

  L1 = [3,4,52,26]

  === [3,4,26,52] (+2)
  L1-L2 = [3,4]
  ==[3,4] (+1)
  L1-R2-L3 = [3]
  L1-R2-R3 = [4]
  L1-R2 = [52,26]
  ==[26,52] (+1)
  L1-R2-L3 = [52]
  L1-R2-R3 = [26]

  === [9,38, 49, 57] (+2)
  R1 = [38,57,9,49]

  R1-L2 = [38, 57]
  ==[38,57] (+1)
  R1-L2-L3 = [38]
  R1-L2-R3 = [57]

  R1-R2 = [9, 49]
  ==[9,49] (+1)
  R1-R2-L3 = [9]
  R1-R2-R3 = [49]

  ===== [3,4,9,26,38,49,52,57] (+4)
  total steps: (4+2+1) * 2 = 14 steps for the merge; 2 for the splits, which results in 18 steps total?.
  I can't calculate the 24 steps by n log n

  2. Mathematical induction
    T(2n) = 2T(n) + 2n
          = 2nlg(n) + 2n
          = 2n(lg(2n) - 1) + 2n
          = 2n lg(2n)
  2. Recurrence relation for recurs_ins_sort
    t(n) = t(n-1) + n
  3. Binary Search
    assume 2^n array
    then ith iteration elements is given by
    i = n / 2^i
    when i = 1, there is only 1 element in view, this is the worst case
    1 = n / 2^i
    lg n = i iterations to get to 1,
    so as a function of n it can take lg n iterations to find the answer at most.
  4.
